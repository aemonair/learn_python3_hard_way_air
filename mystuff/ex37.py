#!/usr/bin/python3

print ("_____Keywords_____")

print ("and")
print ('    Boolean operations')
print ("as")
print ('    expression ["as" target]')
print ("assert")
print ('    Assert statements are a convenient way to insert debugging assertions into a program:')
print ("break")
print ('    "break" may only occur syntactically nested in a "for" or "while" loop, but not nested in a function or class definition within that loop.')
print ("class")
print ('    A class definition defines a class object (see section The standard type hierarchy).')
print ("continue")
print ('    "continue" may only occur syntactically nested in a "for" or "while" loop')
print ("def")
print ('    A function definition defines a user-defined function object. ')
print ("del")
print ('    "del" target_list')
print ("elif")
print ('    The "if elif else" statement is used for conditional execution.')
print ("else")
print ('    The "if elif else" statement is used for conditional execution.')
print ("except")
print ('The "except" clause(s) specify one or more exception handlers. When no exception occurs in the "try" clause, no exception handler is executed.')
print ("exec")
print ('    Execute the given source in the context of globals and locals.')
print ("finally")
print ('    If "finally" is present, it specifies a \'cleanup\' handler.  The "try" clause is executed, including any "except" and "else" clauses.')
print ("for")
print ('    The "for" statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable object:')
print ("from")
print ('    "import" module ["as" name] ( "," module ["as" name] )*')
print ("global")
print ('    The "global" statement is a declaration which holds for the entire current code block. ')
print ("if")
print ('    The "if elif else" statement is used for conditional execution.')
print ("import")
print ('''    The basic import statement (no "from" clause) is executed in two steps:
1. find a module, loading and initializing it if necessary 
2. define a name or names in the local namespace for the scope where the "import" statement occurs.''')
print ("in")
print ('    The operators "in" and "not in" test for membership.  "x in s" evaluates to "True" if *x* is a member of *s*, and "False" otherwise.')
print ("is")
print ('    The operators "is" and "is not" test for object identity: "x is y" is true if and only if *x* and *y* are the same object. ')
print ("lambda")
print ('    Lambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression "lambda arguments: expression" yields a function object. ')
print ("not")
print ('    Boolean operations')
print ("or")
print ('    Boolean operations')
print ("pass")
print ('    "pass" is a null operation ')
print ("print")
print ('    Prints the values to a stream, or to sys.stdout by default.')
print ("raise")
print ('''    >>> try:
    ...     print(1 / 0)
    ... except:
    ...     raise RuntimeError("Something bad happened")
    ...
    Traceback (most recent call last):
      File "<stdin>", line 2, in <module>
    ZeroDivisionError: division by zero
    ''')
print ("return")
print ('    "return" may only occur syntactically nested in a function definition,not within a nested class definition.')
print ("try")
print ('    The "try" statement specifies exception handlers and/or cleanup code for a group of statements:')
print ("while")
print ('    The "while" statement is used for repeated execution as long as an expression is true')
print ("with")
print ('    The "with" statement is used to wrap the execution of a block with methods defined')
print ("yield")
print ('    A "yield" statement is semantically equivalent to a yield expression.')
print ("----------------------------------------")
print ("_____Data Types_____")
print ("True")
print ("False")
print ("None")
print ('bytes')
print ("strings")
print ("numbers")
print ("floats")
print ("lists")
print ("dicts")
print ("----------------------------------------")
print ("_____String Escape Sequences_____")
print ("a\\\\b  a\\b")
print ("a\\\'b  a\'b")
print ("a\\\"b  a\"b")
print ("a\\ab a\ab")
print ("a\\ab a\bb")
print ("a\\fb a\fb")
print ("a\\nb a\nb")
print ("a\\rb a\rb")
print ("a\\tb a\tb")
print ("a\\vb a\vb")
print ("")
print ("_____Old Style String Formats_____")
print ("%d")
print ("%i")
print ("%o")
print ("%u")
print ("%x")
print ("%X")
print ("%e")
print ("%E")
print ("%f")
print ("%F")
print ("%g")
print ("%G")
print ("%c")
print ("%r")
print ("%s")
print ("%%")
print ("")
print ("_____Operators_____")
print ("+")
print ("-")
print ("*")
print ("**")
print ("/")
print ("//")
print ("%")
print ("<")
print (">")
print ("<=")
print (">=")
print ("==")
print ("!=")
# print ("<>")
print ("( )")
print ("[ ]")
print ("{ }")
print ("@")
print (",")
print (":")
print (".")
print ("=")
print (";")
print ("+=")
print ("-=")
print ("*=")
print ("/=")
print ("//=")
print ("%=")
print ("**=")
print ("----------------------------------------")
